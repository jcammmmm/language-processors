~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
~~~ Important note. The results provided by predictor.py are dependant on 
~~~ the rules order. 
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

PRG : INI funcion_principal BLK fin_principal POS
INI : FUN INI
INI : SRA INI
INI : e
POS : FUN POS
POS : SRA POS
POS : eof
BLK : RET
BLK : IMP BLK
BLK : DCL BLK
BLK : CND BLK
BLK : CLA BLK
BLK : LEE BLK
BLK : FOR BLK
BLK : DOW BLK
BLK : WLE BLK
BLK : SEL BLK
BLK : e
FUN : funcion TYP id tk_par_izq PRM tk_par_der hacer BLK fin_funcion
RET : retornar XPR tk_pyc

$ in-out
~ in must be nonempty
IMP : imprimir tk_par_izq SHW tk_par_der tk_pyc
SHW : id SH0
SHW : LIT SH0
SH0 : OPE XPR
SH0 : tk_par_izq ARG tk_par_der
SH0 : e
SH1 : id SHW
SHW : SH0
SHW : tk_par_izq ARG tk_par_der SH0
SH1 : LIT
SH0 : tk_coma id SH0
SH0 : tk_par_izq ARG tk_par_der SH0
SH0 : LIT
SH0 : e
~ out
LEE : leer tk_par_izq INP tk_par_der tk_pyc
INP : id ACC
ACC : tk_punto id ACC
ACC : e

$ call assign and id 
CLA : id CL2
~ Point p
CL2 : id tk_pyc
CL2 : tk_punto id CL5 tk_asig LIT tk_pyc
CL5 : tk_punto id CL5
CL5 : e
CL2 : tk_par_izq ARG tk_par_der
CL2 : tk_asig CL3
CL3 : tk_neg id tk_pyc
CL3 : LIT tk_pyc
CL3 : id CL4 tk_pyc
CL4 : tk_par_izq ARG tk_par_der
CL4 : XP1

$ loops
~ for
FOR : para tk_par_izq DCL XPR tk_pyc STP tk_par_der hacer FO1
FO1 : CND FO1
FO1 : CLA FO1
FO1 : DCL FO1
FO1 : IMP FO1
FO1 : LEE FO1
FO1 : FOR FO1
FO1 : DOW FO1
FO1 : WLE FO1
FO1 : SEL FO1
FO1 : romper FO1
FO1 : fin_para
STP : LIT
~ do
DOW : hacer DO1 tk_par_izq XPR tk_par_der tk_pyc
DO1 : CND DO1
DO1 : CLA DO1
DO1 : DCL DO1
DO1 : IMP DO1
DO1 : LEE DO1
DO1 : FOR DO1
DO1 : DOW DO1
DO1 : WLE DO1
DO1 : SEL DO1
DO1 : romper DO1
DO1 : mientras
~ while
WLE : mientras tk_par_izq XPR tk_par_der hacer WL1
WL1 : CND WL1
WL1 : CLA WL1
WL1 : DCL WL1
WL1 : IMP WL1
WL1 : LEE WL1
WL1 : FOR WL1
WL1 : DOW WL1
WL1 : WLE WL1
WL1 : SEL WL1
WL1 : romper WL1
WL1 : fin_mientras

$ split
CND : si tk_par_izq XPR tk_par_der entonces BLQ
BLQ : CND BLQ
BLQ : CLA BLQ
BLQ : DCL BLQ
BLQ : IMP BLQ
BLQ : LEE BLQ
BLQ : FOR BLQ
BLQ : DOW BLQ
BLQ : WLE BLQ
BLQ : SEL BLQ
BLQ : fin_si
BLQ : si_no BLQ
PRM : TYP id PRM
PRM : tk_coma TYP id PRM
PRM : e

ARG : LIT AR1
ARG : id AR1
AR1 : tk_coma AR2 
AR2 : LIT AR1
AR2 : id AR1
AR1 : e
SRA : estructura id ATR
ATR : TPO id AT1 tk_pyc ATR
AT1 : tk_coma id AT1
AT1 : e
ATR : fin_estructura
TPO : id
TPO : TYP



$ switch
SEL : seleccionar tk_par_izq id tk_par_der entre OPC fin_seleccionar
OPC : caso LIT tk_dosp BLK OPC
OPC : defecto tk_dosp BLK
OPC : e

$ variable declaration, initialization
DCL : TYP DC3
DC3 : id DC0
DC0 : tk_pyc
DC0 : tk_coma DC3
DC0 : tk_asig LIT DC2
DC2 : tk_coma DC3
DC2 : tk_pyc

$ expressions
XPR : tk_neg XPR
XPR : VAL XP1
XP1 : OPE VAL XP1
XP1 : e
VAL : id
VAL : LIT
OPE : tk_igual
OPE : tk_menor
OPE : tk_menor_igual
OPE : tk_mayor
OPE : tk_mayor_igual
OPE : tk_mas
OPE : tk_menos
OPE : tk_mult
OPE : tk_div
OPE : tk_mod

$ data def
LIT : verdadero
LIT : falso
LIT : tk_caracter
LIT : tk_entero
LIT : tk_real
LIT : tk_cadena
TYP : booleano
TYP : caracter
TYP : entero
TYP : real
TYP : cadena




$ s√≠mbolos/token	Token
$ +	                tk_mas
$ -	                tk_menos
$ *	                tk_mult
$ /	                tk_div
$ %	                tk_mod
$ =	                tk_asig
$ <	                tk_menor
$ >	                tk_mayor
$ <=	            tk_menor_igual
$ >=	            tk_mayor_igual
$ ==	            tk_igual
$ &&	            tk_y
$ ||	            tk_o
$ !=	            tk_dif
$ !	                tk_neg
$ :	                tk_dosp
$ ;	                tk_pyc
$ ,	                tk_coma
$ .	                tk_punto
$ (	                tk_par_izq
$ )	                tk_par_der
$ identificador	    id
$ valor_entero	    tk_entero
$ valor_real	    tk_real
$ valor_caracter	tk_caracter
$ valor_cadena	    tk_cadena
$ funcion_principal	funcion_principal
$ fin_principal	    fin_principal
$ leer	            leer
$ imprimir	        imprimir
$ booleano	        booleano 
$ caracter	        caracter
$ entero	        entero
$ real	            real
$ cadena	        cadena
$ si	            si
$ entonces	        entonces
$ fin_si	        fin_si
$ si_no	            si_no
$ mientras	        mientras
$ hacer	            hacer
$ fin_mientras	    fin_mientras
$ para	            para
$ fin_para	        fin_para
$ seleccionar	    seleccionar
$ entre	            entre
$ caso	            caso
$ romper	        romper
$ defecto	        defecto
$ fin_seleccionar	fin_seleccionar
$ estructura	    estructura
$ fin_estructura	fin_estructura
$ funcion	        funcion
$ fin_funcion	    fin_funcion
$ retornar	        retornar
$ falso	            falso
$ verdadero	        verdadero
$ EOF	            EOF